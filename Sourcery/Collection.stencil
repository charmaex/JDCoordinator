// Unluckily the type system in Swift still does not allow to be generic on protocols.
// While it is fine to extend a Collection containing objects implementing a protocol,
// you cannot extend a Collection containing objects as this protocol.
// To compensate this I generated this extension with Sourcery.

{% for protocol in types.protocols where protocol.accessLevel == 'public' and protocol.inheritedTypes|join:""|contains:"AnyObject" or protocol.inheritedTypes|join:""|contains:"RootNavigating" %}
public extension Collection where Element == {{protocol.name}} {
    /// Returns the index of the element in the collection.
    /// - parameter member: An element to look for in the collection.
    /// - returns: members index if member exists in the collection; otherwise, nil.
    func index(of member: Element) -> Index? {
        return index(where: { $0 === member })
    }
}

public extension Sequence where Element == {{protocol.name}} {
    /// Returns a Boolean value that indicates whether the given element exists in the sequence.
    /// - parameter member: An element to look for in the sequence.
    /// - returns: true if member exists in the sequence; otherwise, false.
    func contains(_ member: Element) -> Bool {
        return first(where: { $0 === member }) != nil
    }
}
{% if not forloop.last %}

{% endif %}
{% endfor %}